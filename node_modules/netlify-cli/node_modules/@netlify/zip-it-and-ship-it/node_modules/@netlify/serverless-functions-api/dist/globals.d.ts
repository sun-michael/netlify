import type { Context } from './context.js';
declare const env: {
    delete: (key: string) => void;
    get: (key: string) => string | undefined;
    has: (key: string) => boolean;
    set: (key: string, value: string) => void;
    toObject: () => Record<string, string>;
};
declare global {
    var Netlify: {
        context: Context | null;
        env: typeof env;
    };
}
/**
 * @deprecated globalThis.Netlify is populated during module initialisation, so this function is no longer needed.
 */
export declare const getNetlifyGlobal: () => {
    readonly context: {
        account: {
            id: string;
        };
        cookies: import("./cookie_store.js").Cookies;
        deploy: {
            context: string;
            id: string;
            published: boolean;
        };
        flags: import("./flags.js").Flags;
        geo: import("./geo.js").Geo;
        ip: string;
        json: (input: unknown) => Response;
        log: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        next: () => never;
        params: Record<string, string>;
        requestId: string;
        rewrite: (input: string | URL) => Promise<Response>;
        server: import("./server.js").Server;
        site: import("./site.js").Site;
    } | null;
    env: {
        delete: (key: string) => void;
        get: (key: string) => string | undefined;
        has: (key: string) => boolean;
        set: (key: string, value: string) => void;
        toObject: () => Record<string, string>;
    };
};
export {};
